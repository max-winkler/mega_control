function fine = prolongate(G, coarse, ne)
%PROLONGATE Prolongate solution from coarse to fine graph
%   fine = prolongate(G, coarse, ne) for a given solution vector 'coarse' this
%   function returns the same solution 'fine' on a grid generated by
%   bisection of each interval. The parameter ne is the number of intervals
%   on the coarse graph.

m = size(G.Edges,1); % number of edges
n = size(G.Nodes,1);% number of nodes

nei = ne-1;
ntil = nei*m;

fine = zeros(2*ntil+m+n,1);

% Table of edges of the graph
Edges=table2array(G.Edges(:,1));

for j=1:m % loop over all edges
    % Copy old interior nodes
    fine((j-1)*(2*nei+1)+2:2:j*(2*nei+1)) = coarse((j-1)*nei+1:j*nei);
    
    % Interpolate new interior nodes    
    fine((j-1)*(2*nei+1)+1:2:j*(2*nei+1)) = [...
        0.5*(coarse(ntil+Edges(j,1),1) + coarse((j-1)*nei+1,1)); ...
        0.5*(coarse((j-1)*nei+1:j*nei-1,1) + coarse((j-1)*nei+2:j*nei,1)); ...
        0.5*(coarse(j*nei,1) + coarse(ntil+Edges(j,2),1)) ...
        ];
end

% Copy valued in nodes
fine(2*ntil+m+1:end) = coarse(end-n+1:end);

end

